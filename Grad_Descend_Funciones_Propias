# -*- coding: utf-8 -*-
"""
Created on Wed Oct 27 18:47:48 2021

@author: ticop
"""
import numpy as np

def Transpuesta(A):
    alt=len(A)
    anch=len(A[0])
    M_a= [[A[i][j]
    for i in range(0,alt)]
          for j in range(0,anch)]
    return M_a
         

def ProductoP(A,b):
    c=[]
    for i in range(len(A)):
        for j in range(len(b)):
            x=0
            for n in range(len(A[0])):
                x=x+A[i][n]*b[n]
        c.append(x)
    return c

def gradient(x, A, b):
   e_1 = ProductoP(Transpuesta(A),ProductoP(A, x))
   e_2 = ProductoP(Transpuesta(A), b)
   return [i - j for i,j in zip(e_1, e_2)]
 
def linear_solver(A,b,x,umbral,itmax,k):
 for i in range(itmax):
     print(x)
     y= [k*j for j in gradient(x,A_coef,b_coef)]
     x=[z-l for z,l in zip(x,y)]
     
     
A_coef = np.array([[2.0, 1.0, -3.0], [5.0, -4.0, 1.0], [1.0, -1.0, -4.0]])
b_coef = np.array([7.0, -19.0, 4.0])
x_sol = np.array([1.0, 1.0, 1.0])

itmax=1000
k = 0.002 

f=linear_solver(A_coef, b_coef, x_sol,0.0001,10000,0.002)
